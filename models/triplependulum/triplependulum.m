function dxdt = triplependulum(x, u)
    l1 = 0.1;
    l2 = 0.1;
    l3 = 0.1;
    m1 = 0.1;
    m2 = 0.1;
    m3 = 0.1;
    g = 9.8;

    x1 = x(1);
    x1d = x(2);
    x2 = x(3);
    x2d = x(4);
    x3 = x(5);
    x3d = x(6);
    u1 = u(1);
    u2 = u(2);
    u3 = u(3);
    
    dxdt = zeros(6, 1);
    dxdt(1) = x1d;
    dxdt(2) = -(l2*l3*m3*u1*cos(x3)^2 - l2*l3*m2*u2 - l2*l3*m3*u1 - l2*l3*m3*u2 - l2*l3*m2*u1 + l2*l3*m3*u2*cos(x3)^2 - l1*l3*m2*u2*cos(x2) + l1*l3*m2*u3*cos(x2) - l1*l3*m3*u2*cos(x2) + l1*l3*m3*u3*cos(x2) + l1*l3*m3*u2*cos(x2)*cos(x3)^2 - l1*l3*m3*u3*cos(x2)*cos(x3)^2 + l1*l2^2*l3*m2^2*x1d^2*sin(x2) + l1*l2^2*l3*m2^2*x2d^2*sin(x2) - g*l1*l2*l3*m2^2*sin(x1) + l1*l2*m2*u3*sin(x2)*sin(x3) + l1*l2*m3*u3*sin(x2)*sin(x3) + (l1^2*l2*l3*m2^2*x1d^2*sin(2*x2))/2 + l1*l2^2*l3*m2*m3*x1d^2*sin(x2) + l1*l2^2*l3*m2*m3*x2d^2*sin(x2) - 2*l1*l2^2*l3*m2^2*x1d*x2d*sin(x2) - l1*l3*m3*u2*cos(x3)*sin(x2)*sin(x3) + l1*l3*m3*u3*cos(x3)*sin(x2)*sin(x3) - g*l1*l2*l3*m1*m2*sin(x1) - g*l1*l2*l3*m1*m3*sin(x1) - g*l1*l2*l3*m2*m3*sin(x1) + g*l1*l2*l3*m2^2*cos(x2)^2*sin(x1) + (l1^2*l2*l3*m2*m3*x1d^2*sin(2*x2))/2 + g*l1*l2*l3*m1*m3*cos(x3)^2*sin(x1) + g*l1*l2*l3*m2*m3*cos(x2)^2*sin(x1) - g*l1*l2*l3*m2^2*cos(x1)*cos(x2)*sin(x2) + l1*l2*l3^2*m2*m3*x1d^2*cos(x3)*sin(x2) + l1*l2*l3^2*m2*m3*x2d^2*cos(x3)*sin(x2) + l1*l2*l3^2*m2*m3*x3d^2*cos(x3)*sin(x2) - 2*l1*l2^2*l3*m2*m3*x1d*x2d*sin(x2) - g*l1*l2*l3*m2*m3*cos(x1)*cos(x2)*sin(x2) - 2*l1*l2*l3^2*m2*m3*x1d*x2d*cos(x3)*sin(x2) - 2*l1*l2*l3^2*m2*m3*x1d*x3d*cos(x3)*sin(x2) + 2*l1*l2*l3^2*m2*m3*x2d*x3d*cos(x3)*sin(x2))/(l1^2*l2*l3*(m1*m2 + m1*m3 + m2*m3 - m2^2*cos(x2)^2 + m2^2 - m1*m3*cos(x3)^2 - m2*m3*cos(x2)^2));
    dxdt(3) = x2d;
    dxdt(4) = -(4*l1^2*l3*m1*u3 - 4*l1^2*l3*m1*u2 - 4*l1^2*l3*m2*u2 - 4*l2^2*l3*m2*u1 + 4*l1^2*l3*m2*u3 - 2*l1^2*l3*m3*u2 - 4*l2^2*l3*m2*u2 - 2*l2^2*l3*m3*u1 + 2*l1^2*l3*m3*u3 - 2*l2^2*l3*m3*u2 - 2*l1*l2^2*m2*u3*cos(x2 + x3) - 2*l1*l2^2*m3*u3*cos(x2 + x3) + 4*l1^2*l2*m1*u3*cos(x3) + 2*l1^2*l2*m2*u3*cos(x3) + 2*l1^2*l2*m3*u3*cos(x3) + 2*l1*l2^2*m2*u3*cos(x2 - x3) + 2*l1*l2^2*m3*u3*cos(x2 - x3) - 2*l1^2*l2*m2*u3*cos(2*x2 + x3) - 2*l1^2*l2*m3*u3*cos(2*x2 + x3) + 2*l2^2*l3*m3*u1*cos(2*x3) + 2*l2^2*l3*m3*u2*cos(2*x3) + 2*l1^2*l3*m3*u2*cos(2*x2 + 2*x3) - 2*l1^2*l3*m3*u3*cos(2*x2 + 2*x3) - 2*g*l1*l2^2*l3*m2^2*sin(x1) + 4*l1^2*l2^2*l3*m2^2*x1d^2*sin(2*x2) + 2*l1^2*l2^2*l3*m2^2*x2d^2*sin(2*x2) + 2*g*l1^2*l2*l3*m2^2*sin(x1 - x2) + 2*g*l1*l2^2*l3*m2^2*sin(x1 - 2*x2) - 4*l1*l2*l3*m2*u1*cos(x2) - 8*l1*l2*l3*m2*u2*cos(x2) - 2*l1*l2*l3*m3*u1*cos(x2) + 4*l1*l2*l3*m2*u3*cos(x2) - 4*l1*l2*l3*m3*u2*cos(x2) + 2*l1*l2*l3*m3*u3*cos(x2) + 4*l1*l2^3*l3*m2^2*x1d^2*sin(x2) + 4*l1^3*l2*l3*m2^2*x1d^2*sin(x2) + 4*l1*l2^3*l3*m2^2*x2d^2*sin(x2) + 2*l1*l2*l3*m3*u1*cos(x2 + 2*x3) + 4*l1*l2*l3*m3*u2*cos(x2 + 2*x3) - 2*l1*l2*l3*m3*u3*cos(x2 + 2*x3) - 2*g*l1^2*l2*l3*m2^2*sin(x1 + x2) - 2*g*l1^2*l2*l3*m1*m2*sin(x1 + x2) - g*l1^2*l2*l3*m1*m3*sin(x1 + x2) - 2*g*l1^2*l2*l3*m2*m3*sin(x1 + x2) - 4*g*l1*l2^2*l3*m1*m2*sin(x1) - 2*g*l1*l2^2*l3*m1*m3*sin(x1) - 2*g*l1*l2^2*l3*m2*m3*sin(x1) + 2*l1*l2^2*l3^2*m2*m3*x1d^2*sin(x2 - x3) + 2*l1*l2^2*l3^2*m2*m3*x2d^2*sin(x2 - x3) + 2*l1^2*l2*l3^2*m2*m3*x1d^2*sin(2*x2 + x3) + 2*l1*l2^2*l3^2*m2*m3*x3d^2*sin(x2 - x3) + 2*l1^2*l2*l3^2*m2*m3*x2d^2*sin(2*x2 + x3) + 2*l1^2*l2*l3^2*m2*m3*x3d^2*sin(2*x2 + x3) + g*l1^2*l2*l3*m1*m3*sin(x2 - x1 + 2*x3) - 2*l1^2*l2^2*l3*m1*m3*x1d^2*sin(2*x3) + 4*l1^2*l2^2*l3*m2*m3*x1d^2*sin(2*x2) - 2*l1^2*l2^2*l3*m1*m3*x2d^2*sin(2*x3) + 2*l1^2*l2^2*l3*m2*m3*x2d^2*sin(2*x2) + 2*g*l1^2*l2*l3*m1*m2*sin(x1 - x2) + g*l1^2*l2*l3*m1*m3*sin(x1 - x2) + 2*g*l1^2*l2*l3*m2*m3*sin(x1 - x2) + g*l1*l2^2*l3*m1*m3*sin(x1 - 2*x3) + g*l1*l2^2*l3*m1*m3*sin(x1 + 2*x3) + 2*g*l1*l2^2*l3*m2*m3*sin(x1 - 2*x2) - 4*l1^2*l2^2*l3*m2^2*x1d*x2d*sin(2*x2) + 4*l1^3*l2*l3*m1*m2*x1d^2*sin(x2) + 2*l1^3*l2*l3*m1*m3*x1d^2*sin(x2) + 4*l1*l2^3*l3*m2*m3*x1d^2*sin(x2) + 4*l1^3*l2*l3*m2*m3*x1d^2*sin(x2) + 4*l1*l2^3*l3*m2*m3*x2d^2*sin(x2) - 8*l1*l2^3*l3*m2^2*x1d*x2d*sin(x2) - 2*l1^3*l2*l3*m1*m3*x1d^2*sin(x2 + 2*x3) + 2*l1*l2^2*l3^2*m2*m3*x1d^2*sin(x2 + x3) + 2*l1*l2^2*l3^2*m2*m3*x2d^2*sin(x2 + x3) + 2*l1*l2^2*l3^2*m2*m3*x3d^2*sin(x2 + x3) + g*l1^2*l2*l3*m1*m3*sin(x1 + x2 + 2*x3) - 4*l1^2*l2*l3^2*m1*m3*x1d^2*sin(x3) - 4*l1^2*l2*l3^2*m1*m3*x2d^2*sin(x3) - 2*l1^2*l2*l3^2*m2*m3*x1d^2*sin(x3) - 4*l1^2*l2*l3^2*m1*m3*x3d^2*sin(x3) - 2*l1^2*l2*l3^2*m2*m3*x2d^2*sin(x3) - 2*l1^2*l2*l3^2*m2*m3*x3d^2*sin(x3) + 8*l1^2*l2*l3^2*m1*m3*x1d*x2d*sin(x3) + 8*l1^2*l2*l3^2*m1*m3*x1d*x3d*sin(x3) + 4*l1^2*l2*l3^2*m2*m3*x1d*x2d*sin(x3) - 8*l1^2*l2*l3^2*m1*m3*x2d*x3d*sin(x3) + 4*l1^2*l2*l3^2*m2*m3*x1d*x3d*sin(x3) - 4*l1^2*l2*l3^2*m2*m3*x2d*x3d*sin(x3) - 4*l1*l2^2*l3^2*m2*m3*x1d*x2d*sin(x2 - x3) - 4*l1*l2^2*l3^2*m2*m3*x1d*x3d*sin(x2 - x3) - 4*l1^2*l2*l3^2*m2*m3*x1d*x2d*sin(2*x2 + x3) + 4*l1*l2^2*l3^2*m2*m3*x2d*x3d*sin(x2 - x3) - 4*l1^2*l2*l3^2*m2*m3*x1d*x3d*sin(2*x2 + x3) + 4*l1^2*l2*l3^2*m2*m3*x2d*x3d*sin(2*x2 + x3) + 4*l1^2*l2^2*l3*m1*m3*x1d*x2d*sin(2*x3) - 4*l1^2*l2^2*l3*m2*m3*x1d*x2d*sin(2*x2) - 8*l1*l2^3*l3*m2*m3*x1d*x2d*sin(x2) - 4*l1*l2^2*l3^2*m2*m3*x1d*x2d*sin(x2 + x3) - 4*l1*l2^2*l3^2*m2*m3*x1d*x3d*sin(x2 + x3) + 4*l1*l2^2*l3^2*m2*m3*x2d*x3d*sin(x2 + x3))/(2*l1^2*l2^2*l3*(2*m1*m2 + m1*m3 + m2*m3 - m2^2*cos(2*x2) + m2^2 - m1*m3*cos(2*x3) - m2*m3*cos(2*x2)));
    dxdt(5) = x3d;
    dxdt(6) = -(l1*l3^2*m3^2*u2 - l1*l2^2*m3^2*u3 - l1*l2^2*m2^2*u3 - l1*l3^2*m3^2*u3 + l1*l2^2*m2^2*u3*cos(2*x2) + l1*l2^2*m3^2*u3*cos(2*x2) + l2*l3^2*m3^2*u1*cos(x2) + l2*l3^2*m3^2*u2*cos(x2) - 2*l1*l2^2*m1*m2*u3 - 2*l1*l2^2*m1*m3*u3 + 2*l1*l3^2*m1*m3*u2 - 2*l1*l2^2*m2*m3*u3 - 2*l1*l3^2*m1*m3*u3 + 2*l1*l3^2*m2*m3*u2 - 2*l1*l3^2*m2*m3*u3 + l2*l3^2*m3^2*u1*sin(2*x3)*sin(x2) + l2*l3^2*m3^2*u2*sin(2*x3)*sin(x2) + 2*l1*l2^2*m2*m3*u3*cos(2*x2) - l1*l3^2*m3^2*u2*cos(2*x2)*cos(2*x3) + l1*l3^2*m3^2*u3*cos(2*x2)*cos(2*x3) + l1*l3^2*m3^2*u2*sin(2*x2)*sin(2*x3) - l1*l3^2*m3^2*u3*sin(2*x2)*sin(2*x3) + 2*l2^2*l3*m3^2*u1*sin(x2)*sin(x3) + 2*l2^2*l3*m3^2*u2*sin(x2)*sin(x3) + l1*l2*l3*m3^2*u2*cos(x3) - 2*l1*l2*l3*m3^2*u3*cos(x3) + 2*l2*l3^2*m2*m3*u1*cos(x2) + 2*l2*l3^2*m2*m3*u2*cos(x2) - l2*l3^2*m3^2*u1*cos(2*x3)*cos(x2) - l2*l3^2*m3^2*u2*cos(2*x3)*cos(x2) + l1*l2*l3*m3^2*u2*sin(2*x2)*sin(x3) - 2*l1*l2*l3*m3^2*u3*sin(2*x2)*sin(x3) - l1^2*l2*l3^2*m1*m3^2*x1d^2*sin(x2) - 2*l1^2*l2*l3^2*m2*m3^2*x1d^2*sin(x2) - 2*l1^2*l2*l3^2*m2^2*m3*x1d^2*sin(x2) + 2*l2^2*l3*m2*m3*u1*sin(x2)*sin(x3) + 2*l2^2*l3*m2*m3*u2*sin(x2)*sin(x3) + 2*l1*l2^2*l3^2*m1*m3^2*x1d^2*sin(2*x3) - l1*l2^2*l3^2*m2*m3^2*x1d^2*sin(2*x2) - l1*l2^2*l3^2*m2^2*m3*x1d^2*sin(2*x2) + 2*l1*l2^2*l3^2*m1*m3^2*x2d^2*sin(2*x3) - l1*l2^2*l3^2*m2*m3^2*x2d^2*sin(2*x2) - l1*l2^2*l3^2*m2^2*m3*x2d^2*sin(2*x2) + l1*l2^2*l3^2*m1*m3^2*x3d^2*sin(2*x3) + 2*l1*l2*l3*m1*m3*u2*cos(x3) - 4*l1*l2*l3*m1*m3*u3*cos(x3) + l1*l2*l3*m2*m3*u2*cos(x3) - 2*l1*l2*l3*m2*m3*u3*cos(x3) - l1*l2*l3*m3^2*u2*cos(2*x2)*cos(x3) + 2*l1*l2*l3*m3^2*u3*cos(2*x2)*cos(x3) + 2*l1*l2*l3^3*m1*m3^2*x1d^2*sin(x3) + 2*l1*l2^3*l3*m1*m3^2*x1d^2*sin(x3) + 2*l1*l2*l3^3*m1*m3^2*x2d^2*sin(x3) + l1*l2*l3^3*m2*m3^2*x1d^2*sin(x3) + 2*l1*l2^3*l3*m1*m3^2*x2d^2*sin(x3) + 2*l1*l2*l3^3*m1*m3^2*x3d^2*sin(x3) + l1*l2*l3^3*m2*m3^2*x2d^2*sin(x3) + l1*l2*l3^3*m2*m3^2*x3d^2*sin(x3) - l1*l2*l3*m2*m3*u2*cos(2*x2)*cos(x3) + 2*l1*l2*l3*m2*m3*u3*cos(2*x2)*cos(x3) + 2*l1*l2^3*l3*m1*m2*m3*x1d^2*sin(x3) + 2*l1*l2^3*l3*m1*m2*m3*x2d^2*sin(x3) - 4*l1*l2*l3^3*m1*m3^2*x1d*x2d*sin(x3) - 4*l1*l2^3*l3*m1*m3^2*x1d*x2d*sin(x3) - 4*l1*l2*l3^3*m1*m3^2*x1d*x3d*sin(x3) - 2*l1*l2*l3^3*m2*m3^2*x1d*x2d*sin(x3) + 4*l1*l2*l3^3*m1*m3^2*x2d*x3d*sin(x3) - 2*l1*l2*l3^3*m2*m3^2*x1d*x3d*sin(x3) + 2*l1*l2*l3^3*m2*m3^2*x2d*x3d*sin(x3) + l1*l2*l3*m2*m3*u2*sin(2*x2)*sin(x3) - 2*l1*l2*l3*m2*m3*u3*sin(2*x2)*sin(x3) - l1*l2*l3^3*m2*m3^2*x1d^2*cos(2*x2)*sin(x3) - l1*l2*l3^3*m2*m3^2*x1d^2*sin(2*x2)*cos(x3) - l1*l2*l3^3*m2*m3^2*x2d^2*cos(2*x2)*sin(x3) - l1*l2*l3^3*m2*m3^2*x2d^2*sin(2*x2)*cos(x3) - l1*l2*l3^3*m2*m3^2*x3d^2*cos(2*x2)*sin(x3) - l1*l2*l3^3*m2*m3^2*x3d^2*sin(2*x2)*cos(x3) + 2*l1^2*l2^2*l3*m1*m3^2*x1d^2*cos(x2)*sin(x3) + g*l1*l2*l3^2*m1*m3^2*cos(x1)*sin(x2) + 2*g*l1*l2*l3^2*m2*m3^2*cos(x1)*sin(x2) + 2*g*l1*l2*l3^2*m2^2*m3*cos(x1)*sin(x2) - 2*l1^2*l2*l3^2*m1*m2*m3*x1d^2*sin(x2) + l1^2*l2*l3^2*m1*m3^2*x1d^2*cos(2*x3)*sin(x2) + l1^2*l2*l3^2*m1*m3^2*x1d^2*sin(2*x3)*cos(x2) - 4*l1*l2^2*l3^2*m1*m3^2*x1d*x2d*sin(2*x3) + 2*l1*l2^2*l3^2*m2*m3^2*x1d*x2d*sin(2*x2) + 2*l1*l2^2*l3^2*m2^2*m3*x1d*x2d*sin(2*x2) - 2*l1*l2^2*l3^2*m1*m3^2*x1d*x3d*sin(2*x3) + 2*l1*l2^2*l3^2*m1*m3^2*x2d*x3d*sin(2*x3) - 4*l1*l2^3*l3*m1*m2*m3*x1d*x2d*sin(x3) - 2*g*l1*l2^2*l3*m1*m3^2*cos(x1)*cos(x2)*sin(x3) + 2*l1^2*l2^2*l3*m1*m2*m3*x1d^2*cos(x2)*sin(x3) + 2*l1*l2*l3^3*m2*m3^2*x1d*x2d*cos(2*x2)*sin(x3) + 2*l1*l2*l3^3*m2*m3^2*x1d*x2d*sin(2*x2)*cos(x3) + 2*l1*l2*l3^3*m2*m3^2*x1d*x3d*cos(2*x2)*sin(x3) + 2*l1*l2*l3^3*m2*m3^2*x1d*x3d*sin(2*x2)*cos(x3) - 2*l1*l2*l3^3*m2*m3^2*x2d*x3d*cos(2*x2)*sin(x3) - 2*l1*l2*l3^3*m2*m3^2*x2d*x3d*sin(2*x2)*cos(x3) + 2*g*l1*l2*l3^2*m1*m2*m3*cos(x1)*sin(x2) - g*l1*l2*l3^2*m1*m3^2*cos(2*x3)*cos(x1)*sin(x2) - g*l1*l2*l3^2*m1*m3^2*sin(2*x3)*cos(x1)*cos(x2) - 2*g*l1*l2^2*l3*m1*m2*m3*cos(x1)*cos(x2)*sin(x3))/(l1*l2^2*l3^2*m3*(2*m1*m2 + m1*m3 + m2*m3 - m2^2*cos(2*x2) + m2^2 - m1*m3*cos(2*x3) - m2*m3*cos(2*x2)));
end