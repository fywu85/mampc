function [Y,Xf,Af] = nnmove_02(X,~,~)
%NNMOVE_02 neural network simulation function.
%
% Auto-generated by MATLAB, 25-Jun-2022 23:41:54.
% 
% [Y] = nnmove_02(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 2xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-2.48572758640828;-1.03417192584762];
x1_step1.gain = [0.695000292260732;0.265229745298291];
x1_step1.ymin = -1;

% Layer 1
b1 = [4.4230389733840169697;3.6444070170132492059;2.1146578490556646734;-1.4654671301425854502;0.5919782833529481092;-0.076412174393943099737;-1.188453099516688205;-2.3175990467823690544;3.4958965958960601661;-4.3892727969478757544];
IW1_1 = [-0.30863506857753908452 -4.4037009384991394612;-3.3349119637795912041 2.0873977118906545947;-3.8268215686584681201 -2.441972443448036767;2.5459406076059614144 3.628520571872644318;-2.8526335694382325414 -3.4238026595053270285;-0.49376367281760374928 -4.2059999657557849417;-3.0013043433545880667 -3.3985466279414096036;-4.2461685096798209571 -1.3344730815905470056;3.3492214900879382355 2.8335713952828642803;-1.406159552958115011 4.2171210149932720768];

% Layer 2
b2 = [-1.8113148329347446008;1.3996202997097522136;0.99664142975470348951;-0.62464620453913466402;-0.21075786150051331602;-0.12425151747654686329;0.61037262482149812204;0.98726311706363178988;-1.3940071267375129249;-1.7585977795405178803];
LW2_1 = [0.42170546510932993556 -0.41450040442822616571 -0.75636666814104580592 0.69229920543553702394 -0.47904519637964398937 0.18621529787748103413 -0.37702435014766361165 -0.91411036459315553326 0.74183481504796677797 -0.33125462683371326156;-0.53655852073009013825 0.50286950918834261159 0.8116923733484084913 0.31906133258696700583 0.63707604963792952013 -0.90701772605468544697 0.78807242793279774773 0.8138562311500137092 -0.093257701217187696785 0.47458788869929774412;-0.11692758550653224725 0.52445053895472815153 -0.65071734937273206789 -0.65142258930770180481 0.51543749008117878407 0.8270569446116071699 0.9957101523102571683 0.21141376006534426391 -0.20729690063014866164 -0.31366287025025640922;0.78958840542065300561 -0.46768730088123533495 -0.51900508840600656502 0.54413038291457871409 -0.76616618156388471839 -0.014357289135784965378 0.45957100077545676164 0.79977058141107337796 0.52254212036655733886 0.2578355013049088984;0.21738053750682290177 -0.98807743533835612482 0.32646647948913620763 -0.31239372229386780377 -0.62699443469052507094 0.80959974545543544888 0.30071592278703712653 -0.66440525972150543677 -0.49342141890135637894 -0.21662601917588922285;-0.37454151405097507732 0.027836216040503125591 -0.45569432161048484264 -0.47767795943741597764 0.90273366320994974377 -0.60817176691046614945 0.3959062907871993553 0.98176637122744503383 0.66223217015756119519 0.020242246840683320031;0.18161623607496668598 -0.58910250131067842805 0.64255490427177619495 -0.61391395448462771078 0.70144637558534084221 0.79156608834122255125 -0.38417887429266628363 -0.52235246662384005045 0.37786300449969356663 -0.13150788066110721819;0.34306762581227584485 0.049369868048627918444 -0.3244547826342997765 -0.88998866710320301276 -0.24796057582956429477 0.78012927335018100727 0.41483208770706730961 -0.53339536013004018589 0.90626686506423259626 0.34146657830040555437;-0.18382064246637971894 0.65317924196066345921 0.047961698300756562541 0.62522477227171902037 -0.24299167006620583931 -0.61328315002660116484 -0.59660155430297590051 -0.16347721894704175805 -0.56499328536653725674 -0.84313869346852410303;-0.64709576665967727394 0.24538050392848526071 0.56466906108034597978 0.86628168117086501443 0.2237575354108638781 -0.17470780375983960275 0.5582932671194723584 0.60202793636600260285 -0.60709566745086185335 0.66098100480306443139];

% Layer 3
b3 = 0.14902683833915916778;
LW3_2 = [-0.47085123128191297415 0.7905398764212298035 0.34640142706725041144 0.16351694205627542722 -0.098769571388600749251 -0.33464882119232225444 0.052617428356109399723 -0.11289558396664800544 0.41445357532283416679 -0.067511250788856169702];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 28.0871062138484;
y1_step1.xoffset = -0.0212070508357982;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = repmat(b3,1,Q) + LW3_2*a2;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a3,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(3,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
