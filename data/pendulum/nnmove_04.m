function [Y,Xf,Af] = nnmove_04(X,~,~)
%NNMOVE_04 neural network simulation function.
%
% Auto-generated by MATLAB, 25-Jun-2022 23:41:54.
% 
% [Y] = nnmove_04(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 2xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-2.76604557575478;-1.12258807724005];
x1_step1.gain = [0.631350446914018;0.192283955984375];
x1_step1.ymin = -1;

% Layer 1
b1 = [-4.083975524338465668;-3.3977272774508726627;-1.9635673493845395843;0.47978135044265896036;0.73418744299857152669;0.57889232925095468474;1.3040817387703118602;-2.4491985602494850127;3.3955501369138167966;4.3732657738880149623];
IW1_1 = [4.6451298838441825723 0.79237007187725305712;1.9530630579283627668 -3.8872442228923373975;4.1935351853544045042 1.0375237580871639054;-3.477409999928719575 -2.5696235520840220445;-1.8034189645423426285 3.9932386817297511605;2.5544743490208983161 -3.5773194550658011792;4.2406867754113717339 -0.582005213473073435;-3.8738399162149663724 2.1824984545529093616;4.1986672485309419756 1.580073671225462828;2.3090308962194887599 -3.8260459507628175047];

% Layer 2
b2 = [1.7603386806777057139;1.4676387163452977447;0.88141325333187292568;0.54092567205388220053;-0.032376786453849878966;-0.24972007469822640746;-0.40969214407467047234;-1.0606431750631593047;-1.3926142819029638797;1.9716971772708655752];
LW2_1 = [-0.94172757242898241792 -0.046845103057309517292 -0.2673637691875354605 0.45940581635202654143 0.86383920745032571897 0.55449582191216562066 -0.57652918682935438977 -0.28150241422801514091 -0.30409105721579143822 0.60413800703148490268;-0.24246919572817512978 -0.82071685468020016962 -0.010149916972943137661 0.40617927067054293566 0.070412706506478725532 0.08201502453477287069 -0.82528321298880635837 -0.52319323695775810101 0.30699054938630598866 -1.0355662120409330207;-0.45689803809740819895 -0.39509297811097215947 0.36339589015719808707 0.40819395025108018427 0.90973531646166916342 -0.3720355661490366006 -0.57880248075858764523 -0.42583327171115042953 -0.37126083959105016241 -0.98599000629277244734;-0.083934227691307580765 0.36663778544954439553 0.18910174022566722529 -0.95163856699224369518 -0.30751548968898023695 -0.58474540412760123154 0.60556268705922289275 -0.1839258271498616093 -0.90610528628548192565 -0.22964690549324753843;-0.2660820229753679822 0.30764841482717619758 -0.58420179186602450017 -0.63080622211702330748 -0.15753601473308170844 -0.059477344466503025144 1.126682551910142438 -0.27263491355981572806 -0.56193857090801180298 -0.92297029956152121244;-0.69040428538484599486 0.34453781789668613822 0.20638240448926978288 -0.45557710210108948168 0.37291228886735000581 -0.50313976766518941908 -1.1399276740877444247 0.69083274863843091573 -0.029304322995070544028 0.083632175567841735009;-0.4369453911221204967 0.21381562283301500105 0.98468122354875242674 -0.9376344438538967152 -0.14636193128254779139 0.30967839332523455775 0.37661218122270095909 -0.760881513886184635 -0.6024681365762857288 0.90119043062426507085;-0.18867268775820286719 -0.6340227018518201918 -0.36902473564541971029 0.84341256809729281407 -0.47768555369728143978 -0.85032256482999812874 -0.10454227345199611221 0.79767523631172820853 -0.65737015288104039268 0.53546469298778665014;-0.34794783424071673572 0.69469979556483085759 -0.11712759221274543497 0.22801343373258711744 -0.77636420017699947493 -0.10621067284427374022 0.77405539702912862232 -0.53173458116506344684 0.40004387445043132487 0.77139803801397710536;0.77398563843541534624 -1.1044014995344964003 0.3065572580393740032 -0.39482581763189494861 -0.60346627341663228172 -0.25860066005529358524 0.18572303153980784796 -0.21981564483952681366 0.080003490021003056953 -0.10855513019843561484];

% Layer 3
b3 = 0.94844767615885117173;
LW3_2 = [0.1370300270506980278 0.22667924901612401811 0.1936916991906594554 -0.25446048844861146598 0.85575430362141313712 -0.50968303576201234861 -0.81709525578825692449 0.57443293937332429167 0.16135101820415856388 -0.78178421496765115872];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 27.1142633096101;
y1_step1.xoffset = -0.0237619155336262;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = repmat(b3,1,Q) + LW3_2*a2;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a3,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(3,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
