function [Y,Xf,Af] = nnmove_10(X,~,~)
%NNMOVE_10 neural network simulation function.
%
% Auto-generated by MATLAB, 25-Jun-2022 23:41:57.
% 
% [Y] = nnmove_10(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 2xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-2.76604557575478;-9.2219833326487];
x1_step1.gain = [0.361755682890657;0.108104139960215];
x1_step1.ymin = -1;

% Layer 1
b1 = [-4.6938439536066853819;3.51134584476829259;1.3060351172602213676;-1.9404763653146586133;-0.037346958532383088547;0.9074471775368235793;1.3854565297103542676;-2.0385224110304802636;3.3715611933316314008;-4.457616631248371597];
IW1_1 = [0.76568906581589313287 4.2181547532949164037;-3.3773059379561405358 2.5603262852282884232;-4.5010387515865790675 1.6486077237227922954;5.8966722709610408515 1.8993105944736121682;2.4799703315023027272 -3.5567107742118917457;3.9539615680886948113 1.7844485640801008852;3.5296344052345194342 3.2647370246750724299;-4.11652935510314677 2.318832725462732558;3.693164032358161375 -2.8679481931699335462;-0.48474416587220819919 -4.4146225668559395672];

% Layer 2
b2 = [-1.7693550395246104845;1.4038151126322619966;-1.1456067624162309393;0.29866980018615002512;-0.47004525717643935723;-0.17419995654016595665;-0.4534648299393784221;0.91796158550972206669;1.6590948460300591893;1.5178398105911057314];
LW2_1 = [0.52792137519329329631 -0.75180534982811519917 -0.24991187339323078787 -0.6022804330012762053 -0.26688600667013751 0.17598991379024708781 0.97494742745153917252 0.36639158575800945261 0.64737754732630925503 0.21989229345847524644;-0.27670852250024746688 -0.75283165111754346555 0.92695926042325127447 0.25871823205789268307 -1.1230150731807715392 -0.045338069660808097416 0.88339331771605156263 0.35529001380294628065 -0.25426285099646789289 -0.12449771819803220896;0.66601758370281749499 0.87813497821278441169 1.0499677676036895946 -1.0287624401274797492 -0.069150541028125803167 -0.63794322539162562347 -0.86371427301543068911 0.63302017514720954061 0.28605343509508607269 -0.10467076297760656567;-0.28119463086953722097 0.038786649070467742184 -0.0077942677996106109195 -1.7270912443726724739 0.44071723876354823579 -1.1812538773175300655 0.33259752111504475858 -0.017304979451292078207 -1.2098699448651437649 -0.084720267403556634433;0.82965863662177807836 -0.53089417987692744116 0.43299617461417339026 0.56508907908401762032 -0.44422893653725831209 0.21166307996759067822 0.30749817710249771618 0.12335535030617475472 -0.62290582483154044446 0.79642752475083056218;1.1245716365160181027 -0.50536418763026813572 0.28132468112434094731 -0.0018231794282386956652 -0.52125487085650712427 -0.077250927837926308683 0.61772053323354880749 -0.21839126350608759064 1.0681103043036481726 1.251027958293661646;-0.56472318737332960481 0.86884231250220134157 0.60766925190045451011 -1.411556129917150848 -0.22393916170458857962 -0.47693897356418557543 -0.1817733566717225635 0.19021231757513362703 0.6766255307141477715 -0.25316228502257392963;1.0433396400617784838 -0.93054548002430681475 -0.41337162670163218881 -0.21871266020111501671 0.097758619204251384627 1.6419538458351032872 1.1005227153169252485 -1.114965216094750966 1.2022605832777224499 -0.10001726781361904017;-0.13120858504810373191 -0.060244985186725691362 0.26475725275016454008 0.094334598069575004153 0.026250228790685409958 -2.3229468399407817714 0.06057242129294129751 0.11466948277118338417 0.7226972794007898715 -0.30720634735378365976;0.06676535848948134122 0.43002191367788650256 -0.97001696551478011621 0.78582353670621185593 0.28284585687836211187 1.0991699799272112159 1.8416843077497857539 -1.6755762686234563219 0.34612707760306987703 0.75790221114704325878];

% Layer 3
b3 = -0.0065664470080422261689;
LW3_2 = [-0.43672060315650396145 -0.078560452361406865607 0.39328966780365487432 0.32978393865671667973 0.37098868673420309916 0.50992192912248379688 -0.065509621809902357503 -0.72043859316944103277 0.75306971236394415481 0.60489153333996048545];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 19.9999999999994;
y1_step1.xoffset = -0.0500000000000016;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = repmat(b3,1,Q) + LW3_2*a2;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a3,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(3,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
