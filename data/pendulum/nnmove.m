function [Y,Xf,Af] = nnmove(X,~,~)
%NNMOVE neural network simulation function.
%
% Auto-generated by MATLAB, 20-Mar-2021 13:16:08.
% 
% [Y] = nnmove(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 2xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-3.13831047242221;-13.5295184686897];
x1_step1.gain = [0.318642713826424;0.0737953608447464];
x1_step1.ymin = -1;

% Layer 1
b1 = [-4.5790399719454208949;4.0324678928448598469;-1.8192136541523371562;1.7146701124117869064;-0.5281200061710844551;-0.20110601602754255013;0.9277753067789803465;2.2616982033362020843;3.4016435069394890256;4.4854634827809629627];
IW1_1 = [1.0497990409398363365 -4.1251258036742575186;-1.5996472750773775839 3.3561586183096334679;2.0178327198740140247 3.4304692923704882546;-1.7386056844263682031 2.8738527495959771407;3.6895324194217553604 2.6969400961859997246;3.8811967162218006244 -1.0492428722595792401;0.76066885947863016604 -4.2384884898849009005;5.8420094495195202811 0.5261564848689096463;1.9596735327370691238 3.8280522902254099371;1.3895359830621880626 -4.1125642974155551812];

% Layer 2
b2 = [1.8641488829417423023;1.4228753742149771178;-0.94587701157881431957;0.8497000037733656308;0.30357397272716762915;0.02790967167618696454;0.9594216774269268555;-0.71035191509696071765;-1.2235394533849310861;-2.1331934811421340292];
LW2_1 = [-0.21666763133019675824 0.031162760633165021568 -0.86385650944617120572 0.022032290868215429619 0.37306255227819939968 -0.4051635941263091456 -0.56432591812341426074 -0.29787001706577143079 1.0494557039877643323 0.63399062680792073188;-1.0025623044314950771 -0.24825592575421351338 -0.58268739414600756454 0.0017101764930066813697 0.62768031596266016248 -1.5130811572343443316 -0.05278507919298178197 -0.4988800662858125512 0.19300212018619553045 0.56107494543045666191;0.35557320799321801008 0.35784190937688353795 0.55523346756410185687 -1.251027562411365146 3.5142187540523037725 0.75003999796813869416 0.49382078424574149533 0.27246436043256389015 0.56673400030678899864 -0.66180750912226682381;0.12918598311497825337 -0.86850245217522770158 -0.20906122145655017808 0.45656086382319899242 2.3650664897183575341 0.39455183456732956238 -0.83997763497530641974 2.211040624010454092 0.85625644858765148637 0.16742880561685952179;-0.40059665790856385792 -0.17112986803466168073 -0.55623275479063649662 -0.14863975449704236453 1.2129232976387593901 -0.27463875598352166518 0.13218828579494168451 0.60729367420925117749 -0.13404357540365610668 -0.60891304623259112638;1.0151110719909968161 0.69840202679797291907 -0.32430563160970277137 -0.38355281095760462851 -0.67542550152185232282 -0.037179340955068883312 0.02413784396143256461 0.46437222491408930436 -0.69943097401358633736 -0.24250100975844324225;0.52965368349238628465 0.61836892278141220025 0.22877996569022873707 1.2225404231351049145 -3.4911523241536857043 -0.31065785146681318407 -1.2671792927902103543 0.57020160186859703 -0.35653486771481224249 1.0802874577159355951;0.032420688074317784155 0.57285641348619331659 -0.55015390239113282078 -0.37040430825200965081 -0.85329005853410200277 0.39195767712566403906 0.84422696518609474658 -2.2756892097304382006 0.58719417400278517416 -0.13670227453211217239;-0.49080402819083118748 0.39069327609273757362 0.73458721000369120446 0.70129763780535614437 1.0399521500934698626 0.42313537902642811561 0.54542091696919148269 -0.59188652288713339278 0.7958290329722375045 1.2733594927585629719;-0.093398186222757917374 -0.15382066372579075719 -0.38018335729573216053 0.75658795034972781135 -0.095009080295735431898 -1.0393412161786050874 -0.42290077233357215025 0.29850862227549818106 0.29419034433684093655 -0.9453417231861347414];

% Layer 3
b3 = 1.1276852179729806025;
LW3_2 = [-0.60128343620717028539 0.90813877986822577615 -0.28640853889418671496 -0.91954413371885446171 -0.89408090710105581067 1.3684564087852846281 -0.2470981494669863554 -0.93109636715993981948 0.68915164152618202387 0.91168806571676597184];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 20;
y1_step1.xoffset = -0.05;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = repmat(b3,1,Q) + LW3_2*a2;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a3,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(3,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
